-- LESSON 3 ラムダ関数とレキシカルスコープ
-- ・Haskellでのラムダ関数の記述
-- ・ラムダ式を使った特別な関数の定義
-- ・レキシカルスコープ
-- ・ラムダ関数(匿名関数や無名関数のこと)によるスコープの作成

-- 3.1 ラムダ関数
--   クイックチェック3-1
--     引数を2倍にするラムダ関数を記述し、引数として数字をいくつか渡してみましょう。
four = (\x -> x * 2) 2
ten = (\x -> x * 2) 5

-- 3.2 独自のwhere句を記述する 
--   クイックチェック3-2
--     次の関数を書き換えて、whereの代わりにラムダ関数を使用してみましょう。
--       doubleDouble x dubs*2
--        where dubs = x*2
doubleDouble x = (\x -> x*2) (x*2)

-- 3.3 ラムダからletへ：カスタム変数を変更可能にする
--   クイックチェック3-3
--     ラムダ式だけをつかってoverwriteを再定義してみましょう。
--       overwrite x = let x = 2
--             in let x = 3
--                   in let x =4
--                         in
--                               x
overwrite x = (\x ->
  (\x ->
   (\x -> x) 4
   ) 3
  ) 2

-- 3.4 ラムダ関数とレキシカルスコープ
--   JavaScript のグローバル変数を書き換えてしまう問題を解決しコードを安全な状態に保つために
--   IIFEパターン(Immediately Invoked Function Expression)を使用して解決するようになった
--   (function(){})() この形式を使うことでグローバル変数を書き換えてしまうことがなくなる
--   新しいが関数が作成されるたびに新しいスコープが作成され変数がそのスコープに閉じる
--   レキシカルスコープは変数参照のことでもっとも近いスコープから探していきもっとも近いスコープ
--   になければ、一つ外側のスコープを探しにいく。この参照のことをレキシカルスコープと言う
